C. Eulerian Path (25)
	It has been proven that connected graphs with all vertices of even degree（偶数度） have an Eulerian circuit, 
and such graphs are called Eulerian. 
	If there are exactly（恰好） two vertices of odd degree（奇数度）, 
all Eulerian paths start at one of them and end at the other. 
A graph that has an Eulerian path but not an Eulerian circuit is called semi-Eulerian. 
	Given an undirected graph（无向图）, you are supposed to tell if it is Eulerian, semi-Eulerian, or non-Eulerian.

	N (<= 500), and M
	the degrees of the vertices in ascending order of their indices
	print your conclusion about the graph -- either "Eulerian", "Semi-Eulerian", or "Non-Eulerian". 

Sample Input 1:
7 12
5 7
1 2
1 3
2 3
2 4
3 4
5 2
7 6
6 3
4 5
6 4
5 6
Sample Output 1:
2 4 4 4 4 4 2
Eulerian

Sample Input 2:
6 10
1 2
1 3
2 3
2 4
3 4
5 2
6 3
4 5
6 4
5 6
Sample Output 2:
2 4 4 4 3 3
Semi-Eulerian

Sample Input 3:
5 8
1 2
2 5
5 4
4 1
1 3
3 2
3 4
5 3
Sample Output 3:
3 3 4 3 3
Non-Eulerian
--------------------------------------------------------------------------------
用邻接表存储图，判断每个结点的度【也就是每个结点i的v[i].size()】是多少即可得到最终结果
注意：图必须是连通图
--------------------------------------------------------------------------------

#include <cstdio>
#include <vector>
using namespace std;

const int MAXN = 1010;

int N, M, cnt = 0, cnt2 = 0;
vector<int> Adj[MAXN];
bool vis[MAXN];
int degree[MAXN];


void DFS(int i) {
    if(vis[i] == false) {
        vis[i] = true;
        cnt++;
        for(int j=0; j<Adj[i].size(); j++) {
            DFS(Adj[i][j]);
        }
    }
}

bool check() {
    DFS(1);
    if(cnt == N) return true;
    else return false;
}

bool isOod(int x) {
    if(x % 2 == 0) return false;
    else return true;

}

int main() {
    scanf("%d%d",&N,&M);
    for(int i=0; i<M; i++) {
        int c1, c2;
        scanf("%d%d",&c1,&c2);
        Adj[c1].push_back(c2);
        Adj[c2].push_back(c1);
    }
    if(!check()) {
        printf("Non-Eulerian");
    } else {
        for(int i=1; i<=N; i++) {
            degree[i] = Adj[i].size();
        }
    }
    for(int i=1; i<=N; i++) {
        if(isOod(degree[i])) cnt2++;
    }
    for(int i=1; i<=N; i++) {
        printf("%d",degree[i]);
        if(i != N) printf(" ");
    }
    printf("\n");
    if(cnt2 == 0) printf("Eulerian");
    else if(cnt2 == 2) printf("Semi-Eulerian");
    else printf("Non-Eulerian");


    return 0;
}





