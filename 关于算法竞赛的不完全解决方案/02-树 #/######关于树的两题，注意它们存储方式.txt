【下面都是关于树的两题(一个二叉树,一个树)，注意它们存储方式】

>>>>>>>>> 一般，二叉树的遍历，用的是指针的方式存储，尤其是知道两序重建二叉树的题:
>>>>>>>>> 二叉树的遍历题中，1020、1086用指针方式，而1102用数组下标方式。
struct tree {
    tree *l, *r;
    int data;
};

>>>>>>>>> 树的遍历用的是数组下标的方式存储:(树的遍历)
>>>>>>>>> 树的遍历题中，1079、1090、1094、1106用数组下标方式。
struct node {
    vector<int> child;
} Node[MAXN];

----------------------------------------------------
>>>>>>>>>PAT-A-170304原题-D- 《二叉树》
#include <cstdio>
#include <queue>
using namespace std;

struct node {
    int data;
    node* l;
    node* r;
    int layer;
};

const int MAXN = 1010;

int N, inOrder[MAXN], postOrder[MAXN], cnt = 0, cnt2 = 0;
node* layerOrder[MAXN];
int leftIndex = 0, rightIndex = 0;

node* create(int inL, int inR, int postL, int postR) {
    if(postL > postR) {
        return NULL;  ////NULL  NULL  NULL  NULL  NULL
    }
    node* root = new node;
    root->data = postOrder[postR];
    int i;
    for(i=0; i<N; i++) {
        if(root->data == inOrder[i]) break;
    }
    int lenL = i - inL;  ////// - inL - inL  因为每次的inL不一样，第一次是0，以后就不是了(例如根节点的右子树的左子树的左下标)
    root->l = create(inL,i-1,postL,postL+lenL-1);  ////// 但是每次的i的值是对的，所以可以直接用i
    root->r = create(i+1,inR,postL+lenL,postR-1);

    return root;
}

void BFS(node* root) {
    queue<node*> q;
    q.push(root);
    root->layer = 1;
    while(!q.empty()) {
        node* now  = q.front();
        layerOrder[cnt++] = now;
        q.pop();
        if(now->l != NULL) {
            q.push(now->l);
            now->l->layer = now->layer + 1;
        }
        if(now->r != NULL) {
            q.push(now->r);
            now->r->layer = now->layer + 1;
        }
    }
}

void print() {
    //printf("\n[%d %d]\n",leftIndex,rightIndex);
    if(layerOrder[leftIndex]->layer % 2 == 0) {
        for(int i=leftIndex; i<=rightIndex; i++) {
            printf("%d",layerOrder[i]->data);
            cnt2++;
            if(cnt2 != cnt) printf(" ");
        }
    } else {
        for(int i=rightIndex; i>=leftIndex; i--) {
            printf("%d",layerOrder[i]->data);
            cnt2++;
            if(cnt2 != cnt) printf(" ");
        }
    }

}

int main() {
	scanf("%d",&N);
	int i;
	for(i=0; i<N; i++) {
		scanf("%d",&inOrder[i]);
	}
	for(i=0; i<N; i++) {
		scanf("%d",&postOrder[i]);
	}
	node* root = create(0,N-1,0,N-1);  //////N-1  N-1  N-1  N-1  N-1  N-1
	BFS(root);

    for(i=0; i<N-1; i++) {
        rightIndex = i;
        if(layerOrder[i]->layer != layerOrder[i+1]->layer) {
            print();
            leftIndex = i+1;
        }
    }
    leftIndex = rightIndex;
    rightIndex = cnt - 1;
    //printf("\n[%d %d]\n",leftIndex,rightIndex);
    print();

//    printf("\n");
//	for(i=0; i<N; i++) {
//		printf("%d ",layerOrder[i]->layer);
//	}


	return 0;
}


----------------------------------------------------
>>>>>>>>>PAT-A-180315模拟题-C- 《树》
#include <cstdio>
#include <vector>
using namespace std;

const int MAXN = 1010;

int N, M, cnt = 0, sum;
bool vis[MAXN];
vector<int> number;

struct node {
    int data;
    vector<int> child;  //////数组下标方式
} Node[MAXN];

int solve() {
    int len2 = number.size();
    int x = 0, p = 1;;
    for(int i=len2-1; i>=0; i--) {
        x += number[i] * p;
        p *= 10;
    }
    //number.clear();  ////////////
    return x;
}

void DFS(int index) {
    if(Node[index].child.size() == 0) {
        number.push_back(Node[index].data);
        sum += solve();
        number.pop_back();  /////////
        return;
    }
    for(int i=0; i<Node[index].child.size(); i++) {
        number.push_back(Node[index].data);
        DFS(Node[index].child[i]);
        number.pop_back();  ///////////
    }
}

int main() {
    scanf("%d%d",&N,&M);
    for(int i=0; i<N; i++) {
        scanf("%d",&Node[i].data);
    }
    for(int i=0; i<M; i++) {
        int c1, c2;
        scanf("%d%d",&c1,&c2);
        Node[c1].child.push_back(c2);
        vis[c2] = true;
    }
    for(int i=0; i<N; i++) {
        if(vis[i] == false) {
            cnt++;
        }
    }
    printf("%d\n",cnt);

    for(int i=0; i<N; i++) {
        if(vis[i] == false) {
            sum = 0;
            DFS(i);
            printf("%d",sum);
            if(i != cnt-1) printf(" ");
        }
    }

    return 0;
}
